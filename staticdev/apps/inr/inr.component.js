(function () {
    "use strict";

    angular.module('inr', ['ui.bootstrap', 'sharedModule', 'httpModule', 'ngDialog', 'toaster', 'monospaced.elastic'])
        .directive('inr', INR);

    INR.$inject = ['CollapseService', 'toaster', '$location', '$timeout', 'prompt', 'inrService'];

    function INR(CollapseService, toaster, $location, $timeout, prompt, inrService) {
        return {
            restrict: 'E',
            templateUrl: '/static/apps/inr/inr.template.html',
            scope: true,
            link: linkFn
        };

        function linkFn(scope, element, attr, model) {
            // Properties definition
            scope.altInputFormats = ['m/d/yy'];
            scope.format = 'mm/dd/yyyy';

            scope.dateMeasuredDateOptions = {
                initDate: new Date(),
                maxDate: new Date(2100, 5, 22),
                startingDay: 1,
                format: 'mm/dd/yyyy',
                showWeeks: false
            };

            scope.dateMeasuredIsOpened = false;

            scope.nextINRDateOptions = {
                initDate: new Date(),
                maxDate: new Date(2100, 5, 22),
                startingDay: 1,
                format: 'mm/dd/yyyy',
                showWeeks: false
            };

            scope.nextINRIsOpened = false;

            scope.inrInstance = {};                             // This is initialized value for adding new INR item
            scope.orderInstance = {};                           //
            scope.noteInstance = {};                            //
            scope.totalNote = 0;
            scope.patientId = $('#patient_id').val();           // TODO: Need to be make an other way to retrieve patient ID

            scope.inrTarget = null;                             // Goal(Target INR for the patient. Only one option is selected) 2-3 or 2.5-3.5.
            scope.inrs = [];                                    // Data for INR table
            scope.medications = [];                             // Data for medication list
            scope.problems = [];                                // Data for problem list
            scope.orders = [];                                // Data for problem list
            scope.nodeHistories = [];

            // Method definition (aka widget's behaviour)
            scope.updateTargetINR = updateTargetINR;
            scope.addINR = addINR;
            scope.loadINRs = loadINRs;
            scope.editINR = editINR;
            scope.deleteINR = deleteINR;
            scope.showAllINRTable = showAllINRTable;
            scope.addOrder = addOrder;
            scope.updateNote = updateNote;
            scope.showAllNotes = showAllNotes;


            // Bootstrap load the widget's data
            initData();

            /**
             * Function to load all related data for this widget
             */
            function initData() {
                // Get current target INR setting.
                inrService.getINRTarget(scope.patientId).then(function (response) {
                    scope.inrTarget = response.data.target;
                });

                // Load INR table(5 latest table value is loaded)
                scope.loadINRs(5);

                // Load related problem
                inrService.getProblems(scope.patientId).then(function (response) {
                    scope.problems = response.data.problems;
                });

                // Load related medicine
                inrService.getMedications(scope.patientId).then(function (response) {
                    scope.medications = response.data.medications;
                });

                // Load all orders(aka todo) generated by this INR widget
                inrService.getOrders().then(function (response) {
                    scope.orders = response.data.orders;
                });

                // Load quick glance of text note was added to this INR widget(latest text note info & Total count of text note added)
                inrService.loadNotes(1).then(function (response) {
                    scope.noteInstance = response.data.note;
                    scope.totalNote = response.totalNote;
                });
            }

            /**
             * Handler for set INR target
             */
            function updateTargetINR() {
                inrService.setINRTarget(scope.patientId, scope.inrTarget).then(updateTargetINRSuccess, updateTargetINRFailed);

                function updateTargetINRSuccess(response) {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'Update Target INR success');
                    } else {
                        toaster.pop('error', 'Error', 'Something went wrong!');
                    }
                }

                function updateTargetINRFailed(response) {
                    toaster.pop('error', 'Error', 'Something went wrong!');
                }
            }


            /**
             *
             * @param rows : 0 for loading all item
             */
            function loadINRs(rows) {
                inrService.getINRs(scope.patientId, rows).then(getINRsSuccess, getINRsFailed);

                function getINRsSuccess(response) {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'Load INR table success');
                        scope.inrs = response.data.inrs;
                    } else {
                        toaster.pop('error', 'Error', 'Load INR table failed!');
                    }
                }

                function getINRsFailed() {
                    toaster.pop('error', 'Error', 'Load INR table failed!');
                }
            }

            /**
             * Allow adding new INR to INR table
             * Refer: https://trello.com/c/RPmWI84X
             */
            function addINR() {
                inrService.addINR(scope.patientId, scope.inrInstance).then(addINRSuccess, addINRError);

                function addINRSuccess() {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'Add new INR success');

                        scope.inrInstance = {};

                        scope.inrs.push(scope.inrInstance);
                    } else {
                        toaster.pop('error', 'Error', 'Add INR failed');
                    }

                }

                function addINRError() {
                    toaster.pop('error', 'Error', 'Add INR failed');
                }
            }

            /**
             * Refer: https://trello.com/c/zjh8RsMk
             * @param inr
             */
            function editINR(inr) {
                inrService.updateINR(scope.patientId, inr).then(editINRSuccess, editINRFailed);

                function editINRSuccess(response) {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'Msg when success');

                        // TODO Update INR row from INR table;
                        // scope.inrs
                    } else {
                        toaster.pop('error', 'Error', 'Something went wrong!');
                    }
                }

                function editINRFailed(response) {
                    toaster.pop('error', 'Error', 'Something went wrong!');
                }
            }

            /**
             * https://trello.com/c/zjh8RsMk
             * @param inr
             */
            function deleteINR(inr) {
                inrService.deleteINR(scope.patientId, inr).then(deleteINRSuccess, deleteINRFailed);

                function deleteINRSuccess(response) {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'INR value deleted successfully');

                        // TODO Remove INR row from INR table;
                    } else {
                        toaster.pop('error', 'Error', 'Something went wrong!');
                    }
                }

                function deleteINRFailed(response) {
                    toaster.pop('error', 'Error', 'Something went wrong!');
                }
            }

            /**
             * Load all INR value which is related to this INR
             */
            function showAllINRTable() {
                scope.loadINRs(0);
            }


            /**
             *
             */
            function addOrder() {
                inrService.addOrder(scope.patientId, scope.orderInstance).then(addOrderSuccess, addOrderFailed);

                function addOrderSuccess() {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'Add new order success');
                    } else {
                        toaster.pop('error', 'Error', 'Something went wrong!');
                    }
                }

                function addOrderFailed() {
                    toaster.pop('error', 'Error', 'Add order failed!');

                }

            }

            /**
             * Handler when the text note is changed
             */
            function updateNote() {
                inrService.addNote(scope.patientId, scope.noteInstance).then(updateNoteSuccess, updateNoteFailed);
                function updateNoteSuccess(response) {
                    if (response.data.success) {
                        toaster.pop('success', 'Done', 'Update note success');
                        scope.noteInstance = response.data.note;
                        scope.totalNote = response.totalNote;
                    } else {
                        toaster.pop('error', 'Error', 'Update note failed!');
                    }
                }

                function updateNoteFailed(response) {
                    toaster.pop('error', 'Error', 'Update note failed!');
                }
            }

            /**
             * Loading all old note history
             */
            function showAllNotes() {
                inrService.loadNotes(scope.patientId, 0).then(showAllNoteSuccess, showAllNoteFailed);

                function showAllNoteSuccess(response) {
                    if (response.data.success) {
                        // toaster.pop('success', 'Done', 'Msg when success'); // TODO: This one is redundant becuz the UI is response
                        scope.noteHistories = scope.data.notes;
                    } else {
                        toaster.pop('error', 'Error', 'Loading note history failed!');
                    }
                }

                function showAllNoteFailed(response) {
                    toaster.pop('error', 'Error', 'Loading note history failed!');

                }
            }

            // scope.$watch('inr', function (newVal, oldVal) {
            //     if (newVal) {
            //         scope.inr = scope.$eval(attr.ngModel);
            //         scope.medication_terms = [];
            //         scope.manual_medication = {};
            //         scope.new_medication = {set: false};
            //         // Using for collape /uncollape the widget only
            //         scope.open_inr = function () {
            //             if (!scope.show_inr_collapse) {
            //                 CollapseService.ChangeInrCollapse();
            //                 scope.show_inr_collapse = CollapseService.show_inr_collapse;
            //             }
            //             else {
            //                 CollapseService.ChangeInrCollapse();
            //                 scope.show_inr_collapse = CollapseService.show_inr_collapse;
            //             }
            //         };
            //
            //     }
            // }, true);
            //
            // // function disabled(data) {
            // //     var date = data.date,
            // //     mode = data.mode;
            // //     return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
            // // }
            // // scope.inrvalue['effective_datetime'] = moment().format("YYYY-MM-DD HH:mm:ss");
            // // console.log(moment().format("YYYY-MM-DD"))
            // scope.inrvalue['effective_datetime'] = moment().format("YYYY-MM-DD");
            // scope.inrvalue['next_inr'] = moment().add(1, 'month').format("YYYY-MM-DD");
            // // if (scope.inrs.length > 0) {
            // inrService.getListProblem(scope.inr.id).then(function (data) {
            //     scope.problems = data['data'];
            // });
            // // }
            // scope.open2 = function () {
            //     scope.popup2.opened = true;
            // };
            // scope.open1 = function () {
            //     scope.popup1.opened = true;
            // };
            // scope.saveinrvalue = function () {
            //     if (typeof(scope.inrvalue['value']) === 'undefined' || scope.inrvalue['value'] == null || typeof(scope.inrvalue['current_dose']) === 'undefined' || scope.inrvalue['current_dose'] == null || typeof(scope.inrvalue['effective_datetime']) === 'undefined' || scope.inrvalue['effective_datetime'] == null || typeof(scope.inrvalue['new_dosage']) === 'undefined' || scope.inrvalue['new_dosage'] == null || typeof(scope.inrvalue['next_inr']) === 'undefined' || scope.inrvalue['next_inr'] == null) {
            //         toaster.pop('warning', 'Warning', 'Please fill all field before save!');
            //         return '';
            //     }
            //     scope.inrvalue['inr'] = scope.inrs[0].id;
            //     scope.inrvalue['author_id'] = scope.inrs[0].author.id;
            //     scope.inrvalue.effective_datetime = moment(scope.inrvalue['effective_datetime']).format("YYYY-MM-DD");
            //     scope.inrvalue.next_inr = moment(scope.inrvalue['next_inr']).format("YYYY-MM-DD");
            //     inrService.saveInrValue(scope.inrvalue).then(function (data) {
            //         if (data['success'] == true) {
            //             toaster.pop('success', 'Done', 'Save inrvalue success!');
            //             scope.inrvalue['id'] = data['id'];
            //             scope.inrvalue['ispatient'] = true;
            //             scope.inrs[0].inr_values.unshift(scope.inrvalue);
            //             scope.inrvalue = {};
            //             scope.inrvalue['effective_datetime'] = moment().format("YYYY-MM-DD");
            //             scope.inrvalue['next_inr'] = moment().add(1, 'month').format("YYYY-MM-DD");
            //         } else {
            //             toaster.pop('error', 'Error', 'Can\'t save inrvalue!');
            //         }
            //     });
            // };
            // scope.initvalue = function (value) {
            //     value['isshow'] = false;
            //     value['value'] = parseFloat(value['value']);
            //     value['effective_datetime'] = moment(value['effective_datetime']).format("YYYY-MM-DD");
            //     value['next_inr'] = moment(value['next_inr']).format("YYYY-MM-DD");
            // };
            // scope.editinrvalue = function (value, id) {
            //     if (value.isshow) {
            //         if (typeof(value['value']) === 'undefined' || value['value'] == "" || typeof(value['current_dose']) === 'undefined' || value['current_dose'] == "" || typeof(value['effective_datetime']) === 'undefined' || value['effective_datetime'] == "" || typeof(value['new_dosage']) === 'undefined' || value['new_dosage'] == "" || typeof(value['next_inr']) === 'undefined' || value['next_inr'] == "") {
            //             toaster.pop('warning', 'Warning', 'Please fill all field before save change!');
            //             return '';
            //         }
            //         value.effective_datetime = moment(value['effective_datetime']).format("YYYY-MM-DD");
            //         value.next_inr = moment(value['next_inr']).format("YYYY-MM-DD");
            //         inrService.editInrValue(value, id).then(function (data) {
            //             if (data['success'] == true) {
            //                 toaster.pop('success', 'Done', 'Edit inrvalue success!');
            //                 value.isshow = !value.isshow;
            //             } else {
            //                 toaster.pop('error', 'Error', 'Can\'t edit Inrvalue!');
            //             }
            //         });
            //     } else {
            //         value.effective_datetime = moment(value['effective_datetime']).format("YYYY-MM-DD");
            //         value.next_inr = moment(value['next_inr']).format("YYYY-MM-DD");
            //         value.isshow = !value.isshow;
            //     }
            // };
            // scope.deleteinrvalue = function (id, index, datas) {
            //     inrService.deleteInrValue(id).then(function (data) {
            //         if (data['success'] == true) {
            //             toaster.pop('success', 'Done', 'Delete inrvalue success!');
            //             datas.splice(index, 1);
            //         } else {
            //             toaster.pop('error', 'Error', 'Can\'t delete Inrvalue!');
            //         }
            //     });
            // };
            // scope.checkradio = function (a) {
            //     scope.inr.target = parseInt(a.target);
            //     inrService.setTargetforInr(a.id, a.target).then(function (data) {
            //         if (data['success'] == true) {
            //             toaster.pop('success', 'Done', 'Set target success!');
            //         } else {
            //             toaster.pop('error', 'Error', 'Can\'t set target , we are fixing it asap!');
            //         }
            //     });
            // };
            // scope.save_note = function (note, oldnote, notes) {
            //     if (note.note == '' || note.note.length < 1)
            //         return '';
            //     data = {};
            //     data['inr_id'] = note.inr;
            //     data['note'] = note.note;
            //     inrService.addNote(data).then(function (data) {
            //         if (data['success'] == true) {
            //             toaster.pop('success', 'Done', 'Save note success!');
            //             notes.push(data['info']);
            //         } else {
            //             toaster.pop('error', 'Error', 'Save note faild!');
            //         }
            //     });
            // };
            // scope.add_note = function (note, notes) {
            //     if (note.note == '' || note.note.length < 1)
            //         return '';
            //     inrService.addNote(note).then(function (data) {
            //         if (data['success'] == true) {
            //             toaster.pop('success', 'Done', 'Add note success!');
            //             notes.push(data['info']);
            //         } else {
            //             toaster.pop('error', 'Error', 'Add note faild!');
            //         }
            //     });
            // }

            // Watcher(s)
            // scope.$on('inrTarget', function (newVal, oldVal) {
            //     if (newVal != oldVal) {
            //         scope.updateTargetINR();
            //     }
            // })
        }
    }
})();